# -*- coding: utf-8 -*-
"""Options_combinations_algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UzYrKnFrVN8LZF4d4QO7Gd5UmRM2Ly9h

# 🧠 Option Strategy Visualizer

Explore, visualize, and understand the payoff of custom option strategies built from basic Calls and Puts (Long/Short).  
This tool is perfect for learning, teaching, or prototyping strategies in computational finance.

---

## 📘 How It Works

This Python script generates all valid combinations of options (Calls and Puts, Long and Short) and lets you:

- View all possible strategy combinations of N options
- Select one by index
- Instantly see its payoff graph

You can define how many options you want per strategy (`2`, `3`, etc.) and explore hundreds of combinations with one input.

---

## 🎥 Watch the Full Explanation

Want to understand the logic line by line?

📺 **YouTube Breakdown (with examples and explanations):**

- 🇪🇸 In Spanish: [Markh4ck on YouTube](https://www.youtube.com/@Markh4ck)  
- 🇬🇧 In English: [MarcAliaga on YouTube](https://www.youtube.com/@MarcAliaga)

---

## 📂 Resources

- 🧾 PDF Guide: included in the repo
- 🧠 Full code: [GitHub.com/markh4ck](https://github.com/markh4ck)
- 💬 Open discussions and Q&A in the [Issues](https://github.com/markh4ck) section

---

## 🤝 Contribute!

This project is **open to collaboration**!  
Whether you want to:

- Improve the option pricing logic ( can be implemented a dynamic premiums)
- Add new option types (exotic options)
- Build a better UI (CLI/GUI/Web)
- Export strategies as CSV or PDF
- Integrate it with real market data

👉 Feel free to **fork the repo** and **submit a Pull Request**.

I welcome improvements in:

- 📊 Strategy logic
- 🖼️ User Interface / Visualization
- ⚙️ Performance optimization
- 🌍 Localization or language enhancements

> All contributions will be reviewed and credited.

---

## 🧑‍💻 About the Author

Created by **Marc Aliaga** — also known as **Markh4ck**.  
I share projects at the intersection of:

- 🧠 Mathematics
- 💰 Financial Engineering
- 🧮 Algorithmic Thinking
- 🐍 Python for real-world problems

📦 GitHub: [github.com/markh4ck](https://github.com/markh4ck)  
🎓 YouTube (Finance & Coding): [Markh4ck / MarcAliaga](https://www.youtube.com/@Markh4ck)

If you like content like this, consider ⭐️ starring the repo and subscribing on YouTube.

---
"""

import numpy as np
import matplotlib.pyplot as plt
from itertools import combinations, product


# parameters

strike_list = [90, 95, 100, 105, 110]
fixed_premium = 5
underlying_prices = np.linspace(60, 120, 5)
#-------------------------- ------------------------------------

def generate_basic_options():
    options = []
    for opt_type, position, strike in product(['Call', 'Put'], ['Long', 'Short'], strike_list):
        options.append({
            'type': opt_type,
            'position': position,
            'strike': strike,
            'premium': fixed_premium
        })
    return options

def compute_option_payoff(option, prices):
    strike = option['strike']
    premium = option['premium']

    if option['type'] == 'Call':
        intrinsic_value = np.maximum(prices - strike, 0)
    else:  # Put
        intrinsic_value = np.maximum(strike - prices, 0)

    if option['position'] == 'Long':
        return intrinsic_value - premium
    else:  # Short
        return -intrinsic_value + premium

def compute_strategy_payoff(combination, prices):
    total_payoff = np.zeros_like(prices)
    for option in combination:
        total_payoff += compute_option_payoff(option, prices)
    return total_payoff

def describe_combination(combination):
    return " + ".join([f"{opt['position']} {opt['type']} @{opt['strike']}" for opt in combination])

def is_valid_combination(combination):
    seen = set()
    for opt in combination:
        key = (opt['type'], opt['strike'])
        if key in seen:
            return False
        seen.add(key)
    return True

def strategy_viewer_menu(n_options):
    base_options = generate_basic_options()
    all_combinations = list(combinations(base_options, n_options))

    valid_combinations = [c for c in all_combinations if is_valid_combination(c)]

    print(f"\nTotal valid combinations: {len(valid_combinations)}\n")
    print(f"{'Index':<6} | Strategy Description")
    print("-" * 50)

    for i, combo in enumerate(valid_combinations):
        desc = describe_combination(combo)
        print(f"{i:<6} | {desc}")

    while True:
        try:
          selection = input("\nEnter the strategy index to view (or type 'exit'): ")
          if selection.lower() == 'exit':
            print("Exiting.")
            break
          idx = int(selection)
          if 0 <= idx < len(valid_combinations):
            combo = valid_combinations[idx]
            payoff = compute_strategy_payoff(combo, underlying_prices)
            desc = describe_combination(combo)

            plt.figure(figsize=(10, 5))
            plt.plot(underlying_prices, payoff, label=desc)
            plt.axhline(0, color='black', linestyle='--')
            plt.title(f"Strategy #{idx}: {desc}")
            plt.xlabel("Underlying Price at Expiration")
            plt.ylabel("Profit / Loss")
            plt.legend()
            plt.grid(True)
            plt.show()

          else:
            print("Index out of range.")
        except ValueError:
           print("Invalid input. Please enter a number or 'exit'.")



strategy_viewer_menu(2)  # number of options you want